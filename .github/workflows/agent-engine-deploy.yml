name: 🚀 Deploy to Vertex AI Agent Engine

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  REGION: us-central1

jobs:
  # ===============================
  # CODE QUALITY & TESTING
  # ===============================
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio flake8 black isort mypy
        
    - name: 🔍 Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: 🎨 Check code formatting
      run: |
        black --check .
        isort --check-only .
        
    - name: 🔬 Type checking
      run: mypy . --ignore-missing-imports
      
    - name: 🧪 Run tests
      run: pytest tests/ -v

  # ===============================
  # STAGING DEPLOYMENT
  # ===============================
  deploy-staging:
    name: 🚀 Deploy to Staging (Agent Engine)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
        
    - name: 🛠️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: 📦 Install Agent Engine SDK
      run: |
        pip install google-cloud-aiplatform[agent_engines,adk]
        pip install -r requirements.txt
        
    - name: 🚀 Deploy agents to Vertex AI Agent Engine
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_CLOUD_PROJECT: ${{ env.PROJECT_ID }}
        GOOGLE_CLOUD_LOCATION: ${{ env.REGION }}
      run: |
        python << 'EOF'
        import os
        import sys
        from google.cloud import aiplatform
        from vertexai.preview import agent_engines
        
        # Initialize Vertex AI
        aiplatform.init(
            project=os.environ['GOOGLE_CLOUD_PROJECT'],
            location=os.environ['GOOGLE_CLOUD_LOCATION']
        )
        
        # Deploy agents
        agents = [
            ('core_agent', 'Core Agent - Orchestrator and LLM/Memory'),
            ('context_agent', 'Context Agent - User profiles and personalization'),
            ('domain_realestate', 'Domain Real Estate Agent - Property search and CRM')
        ]
        
        deployed_agents = []
        
        for agent_name, description in agents:
            print(f"🚀 Deploying {agent_name} to staging...")
            
            try:
                # Import agent module
                sys.path.insert(0, f"agents/{agent_name}")
                agent_module = __import__('agent')
                local_agent = agent_module.root_agent
                
                # Deploy to Agent Engine
                remote_agent = agent_engines.create(
                    local_agent,
                    requirements=[
                        "google-cloud-aiplatform[agent_engines,adk]",
                        "google-adk",
                        "a2a-sdk",
                        "httpx",
                        "python-dotenv",
                        "google-generativeai"
                    ],
                    display_name=f"{agent_name}-staging",
                    description=f"Staging: {description}",
                    env_vars={
                        "GEMINI_API_KEY": os.environ['GEMINI_API_KEY'],
                        "ENVIRONMENT": "staging",
                        "GOOGLE_CLOUD_PROJECT": os.environ['GOOGLE_CLOUD_PROJECT'],
                        "GOOGLE_CLOUD_LOCATION": os.environ['GOOGLE_CLOUD_LOCATION']
                    },
                    gcs_dir_name=f"agent-deployments/staging/{agent_name}"
                )
                
                deployed_agents.append({
                    'name': agent_name,
                    'resource_name': remote_agent.resource_name,
                    'endpoint': remote_agent.query_endpoint if hasattr(remote_agent, 'query_endpoint') else 'N/A'
                })
                
                print(f"✅ {agent_name} deployed successfully!")
                print(f"   Resource: {remote_agent.resource_name}")
                
            except Exception as e:
                print(f"❌ Failed to deploy {agent_name}: {str(e)}")
                sys.exit(1)
        
        print("\n🎉 All agents deployed successfully to staging!")
        print("\n📊 Deployment Summary:")
        for agent in deployed_agents:
            print(f"  • {agent['name']}: {agent['resource_name']}")
        EOF
        
    - name: 🧪 Test staging deployment
      run: |
        echo "✅ Staging deployment completed successfully!"
        echo "Environment: staging"
        echo "Region: ${{ env.REGION }}"

  # ===============================
  # PRODUCTION DEPLOYMENT
  # ===============================
  deploy-production:
    name: 🏭 Deploy to Production (Agent Engine)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
        
    - name: 🛠️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: 📦 Install Agent Engine SDK
      run: |
        pip install google-cloud-aiplatform[agent_engines,adk]
        pip install -r requirements.txt
        
    - name: 🚀 Deploy agents to Vertex AI Agent Engine
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_PROD }}
        GOOGLE_CLOUD_PROJECT: ${{ env.PROJECT_ID }}
        GOOGLE_CLOUD_LOCATION: ${{ env.REGION }}
      run: |
        python << 'EOF'
        import os
        import sys
        from google.cloud import aiplatform
        from vertexai.preview import agent_engines
        
        # Initialize Vertex AI
        aiplatform.init(
            project=os.environ['GOOGLE_CLOUD_PROJECT'],
            location=os.environ['GOOGLE_CLOUD_LOCATION']
        )
        
        # Deploy agents
        agents = [
            ('core_agent', 'Core Agent - Orchestrator and LLM/Memory'),
            ('context_agent', 'Context Agent - User profiles and personalization'),
            ('domain_realestate', 'Domain Real Estate Agent - Property search and CRM')
        ]
        
        deployed_agents = []
        
        for agent_name, description in agents:
            print(f"🚀 Deploying {agent_name} to production...")
            
            try:
                # Import agent module
                sys.path.insert(0, f"agents/{agent_name}")
                agent_module = __import__('agent')
                local_agent = agent_module.root_agent
                
                # Deploy to Agent Engine
                remote_agent = agent_engines.create(
                    local_agent,
                    requirements=[
                        "google-cloud-aiplatform[agent_engines,adk]",
                        "google-adk",
                        "a2a-sdk",
                        "httpx",
                        "python-dotenv",
                        "google-generativeai"
                    ],
                    display_name=f"{agent_name}-production",
                    description=f"Production: {description}",
                    env_vars={
                        "GEMINI_API_KEY": os.environ['GEMINI_API_KEY'],
                        "ENVIRONMENT": "production",
                        "GOOGLE_CLOUD_PROJECT": os.environ['GOOGLE_CLOUD_PROJECT'],
                        "GOOGLE_CLOUD_LOCATION": os.environ['GOOGLE_CLOUD_LOCATION']
                    },
                    gcs_dir_name=f"agent-deployments/production/{agent_name}"
                )
                
                deployed_agents.append({
                    'name': agent_name,
                    'resource_name': remote_agent.resource_name,
                    'endpoint': remote_agent.query_endpoint if hasattr(remote_agent, 'query_endpoint') else 'N/A'
                })
                
                print(f"✅ {agent_name} deployed successfully!")
                print(f"   Resource: {remote_agent.resource_name}")
                
            except Exception as e:
                print(f"❌ Failed to deploy {agent_name}: {str(e)}")
                sys.exit(1)
        
        print("\n🎉 All agents deployed successfully to production!")
        print("\n📊 Deployment Summary:")
        for agent in deployed_agents:
            print(f"  • {agent['name']}: {agent['resource_name']}")
        EOF
        
    - name: 🧪 Test production deployment
      run: |
        echo "✅ Production deployment completed successfully!"
        echo "Environment: production"
        echo "Region: ${{ env.REGION }}"

  # ===============================
  # NOTIFICATION
  # ===============================
  notify:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "✅ Agent Engine deployment completed successfully!"
        echo "Environment: ${{ github.event.inputs.environment || 'auto' }}"
        echo "Commit: ${{ github.sha }}"
        
    - name: 📢 Notify failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Agent Engine deployment failed!"
        echo "Environment: ${{ github.event.inputs.environment || 'auto' }}"
        echo "Commit: ${{ github.sha }}"
        exit 1
